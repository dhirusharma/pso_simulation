# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _Cluster_Pso
else:
    import _Cluster_Pso

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _Cluster_Pso.delete_SwigPyIterator

    def value(self):
        return _Cluster_Pso.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _Cluster_Pso.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _Cluster_Pso.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _Cluster_Pso.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _Cluster_Pso.SwigPyIterator_equal(self, x)

    def copy(self):
        return _Cluster_Pso.SwigPyIterator_copy(self)

    def next(self):
        return _Cluster_Pso.SwigPyIterator_next(self)

    def __next__(self):
        return _Cluster_Pso.SwigPyIterator___next__(self)

    def previous(self):
        return _Cluster_Pso.SwigPyIterator_previous(self)

    def advance(self, n):
        return _Cluster_Pso.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _Cluster_Pso.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _Cluster_Pso.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _Cluster_Pso.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _Cluster_Pso.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _Cluster_Pso.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _Cluster_Pso.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _Cluster_Pso:
_Cluster_Pso.SwigPyIterator_swigregister(SwigPyIterator)

class vector0(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _Cluster_Pso.vector0_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _Cluster_Pso.vector0___nonzero__(self)

    def __bool__(self):
        return _Cluster_Pso.vector0___bool__(self)

    def __len__(self):
        return _Cluster_Pso.vector0___len__(self)

    def __getslice__(self, i, j):
        return _Cluster_Pso.vector0___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _Cluster_Pso.vector0___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _Cluster_Pso.vector0___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _Cluster_Pso.vector0___delitem__(self, *args)

    def __getitem__(self, *args):
        return _Cluster_Pso.vector0___getitem__(self, *args)

    def __setitem__(self, *args):
        return _Cluster_Pso.vector0___setitem__(self, *args)

    def pop(self):
        return _Cluster_Pso.vector0_pop(self)

    def append(self, x):
        return _Cluster_Pso.vector0_append(self, x)

    def empty(self):
        return _Cluster_Pso.vector0_empty(self)

    def size(self):
        return _Cluster_Pso.vector0_size(self)

    def swap(self, v):
        return _Cluster_Pso.vector0_swap(self, v)

    def begin(self):
        return _Cluster_Pso.vector0_begin(self)

    def end(self):
        return _Cluster_Pso.vector0_end(self)

    def rbegin(self):
        return _Cluster_Pso.vector0_rbegin(self)

    def rend(self):
        return _Cluster_Pso.vector0_rend(self)

    def clear(self):
        return _Cluster_Pso.vector0_clear(self)

    def get_allocator(self):
        return _Cluster_Pso.vector0_get_allocator(self)

    def pop_back(self):
        return _Cluster_Pso.vector0_pop_back(self)

    def erase(self, *args):
        return _Cluster_Pso.vector0_erase(self, *args)

    def __init__(self, *args):
        _Cluster_Pso.vector0_swiginit(self, _Cluster_Pso.new_vector0(*args))

    def push_back(self, x):
        return _Cluster_Pso.vector0_push_back(self, x)

    def front(self):
        return _Cluster_Pso.vector0_front(self)

    def back(self):
        return _Cluster_Pso.vector0_back(self)

    def assign(self, n, x):
        return _Cluster_Pso.vector0_assign(self, n, x)

    def resize(self, *args):
        return _Cluster_Pso.vector0_resize(self, *args)

    def insert(self, *args):
        return _Cluster_Pso.vector0_insert(self, *args)

    def reserve(self, n):
        return _Cluster_Pso.vector0_reserve(self, n)

    def capacity(self):
        return _Cluster_Pso.vector0_capacity(self)
    __swig_destroy__ = _Cluster_Pso.delete_vector0

# Register vector0 in _Cluster_Pso:
_Cluster_Pso.vector0_swigregister(vector0)

class regions_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _Cluster_Pso.regions_t_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _Cluster_Pso.regions_t___nonzero__(self)

    def __bool__(self):
        return _Cluster_Pso.regions_t___bool__(self)

    def __len__(self):
        return _Cluster_Pso.regions_t___len__(self)

    def __getslice__(self, i, j):
        return _Cluster_Pso.regions_t___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _Cluster_Pso.regions_t___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _Cluster_Pso.regions_t___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _Cluster_Pso.regions_t___delitem__(self, *args)

    def __getitem__(self, *args):
        return _Cluster_Pso.regions_t___getitem__(self, *args)

    def __setitem__(self, *args):
        return _Cluster_Pso.regions_t___setitem__(self, *args)

    def pop(self):
        return _Cluster_Pso.regions_t_pop(self)

    def append(self, x):
        return _Cluster_Pso.regions_t_append(self, x)

    def empty(self):
        return _Cluster_Pso.regions_t_empty(self)

    def size(self):
        return _Cluster_Pso.regions_t_size(self)

    def swap(self, v):
        return _Cluster_Pso.regions_t_swap(self, v)

    def begin(self):
        return _Cluster_Pso.regions_t_begin(self)

    def end(self):
        return _Cluster_Pso.regions_t_end(self)

    def rbegin(self):
        return _Cluster_Pso.regions_t_rbegin(self)

    def rend(self):
        return _Cluster_Pso.regions_t_rend(self)

    def clear(self):
        return _Cluster_Pso.regions_t_clear(self)

    def get_allocator(self):
        return _Cluster_Pso.regions_t_get_allocator(self)

    def pop_back(self):
        return _Cluster_Pso.regions_t_pop_back(self)

    def erase(self, *args):
        return _Cluster_Pso.regions_t_erase(self, *args)

    def __init__(self, *args):
        _Cluster_Pso.regions_t_swiginit(self, _Cluster_Pso.new_regions_t(*args))

    def push_back(self, x):
        return _Cluster_Pso.regions_t_push_back(self, x)

    def front(self):
        return _Cluster_Pso.regions_t_front(self)

    def back(self):
        return _Cluster_Pso.regions_t_back(self)

    def assign(self, n, x):
        return _Cluster_Pso.regions_t_assign(self, n, x)

    def resize(self, *args):
        return _Cluster_Pso.regions_t_resize(self, *args)

    def insert(self, *args):
        return _Cluster_Pso.regions_t_insert(self, *args)

    def reserve(self, n):
        return _Cluster_Pso.regions_t_reserve(self, n)

    def capacity(self):
        return _Cluster_Pso.regions_t_capacity(self)
    __swig_destroy__ = _Cluster_Pso.delete_regions_t

# Register regions_t in _Cluster_Pso:
_Cluster_Pso.regions_t_swigregister(regions_t)

class individual_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _Cluster_Pso.individual_t_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _Cluster_Pso.individual_t___nonzero__(self)

    def __bool__(self):
        return _Cluster_Pso.individual_t___bool__(self)

    def __len__(self):
        return _Cluster_Pso.individual_t___len__(self)

    def __getslice__(self, i, j):
        return _Cluster_Pso.individual_t___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _Cluster_Pso.individual_t___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _Cluster_Pso.individual_t___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _Cluster_Pso.individual_t___delitem__(self, *args)

    def __getitem__(self, *args):
        return _Cluster_Pso.individual_t___getitem__(self, *args)

    def __setitem__(self, *args):
        return _Cluster_Pso.individual_t___setitem__(self, *args)

    def pop(self):
        return _Cluster_Pso.individual_t_pop(self)

    def append(self, x):
        return _Cluster_Pso.individual_t_append(self, x)

    def empty(self):
        return _Cluster_Pso.individual_t_empty(self)

    def size(self):
        return _Cluster_Pso.individual_t_size(self)

    def swap(self, v):
        return _Cluster_Pso.individual_t_swap(self, v)

    def begin(self):
        return _Cluster_Pso.individual_t_begin(self)

    def end(self):
        return _Cluster_Pso.individual_t_end(self)

    def rbegin(self):
        return _Cluster_Pso.individual_t_rbegin(self)

    def rend(self):
        return _Cluster_Pso.individual_t_rend(self)

    def clear(self):
        return _Cluster_Pso.individual_t_clear(self)

    def get_allocator(self):
        return _Cluster_Pso.individual_t_get_allocator(self)

    def pop_back(self):
        return _Cluster_Pso.individual_t_pop_back(self)

    def erase(self, *args):
        return _Cluster_Pso.individual_t_erase(self, *args)

    def __init__(self, *args):
        _Cluster_Pso.individual_t_swiginit(self, _Cluster_Pso.new_individual_t(*args))

    def push_back(self, x):
        return _Cluster_Pso.individual_t_push_back(self, x)

    def front(self):
        return _Cluster_Pso.individual_t_front(self)

    def back(self):
        return _Cluster_Pso.individual_t_back(self)

    def assign(self, n, x):
        return _Cluster_Pso.individual_t_assign(self, n, x)

    def resize(self, *args):
        return _Cluster_Pso.individual_t_resize(self, *args)

    def insert(self, *args):
        return _Cluster_Pso.individual_t_insert(self, *args)

    def reserve(self, n):
        return _Cluster_Pso.individual_t_reserve(self, n)

    def capacity(self):
        return _Cluster_Pso.individual_t_capacity(self)
    __swig_destroy__ = _Cluster_Pso.delete_individual_t

# Register individual_t in _Cluster_Pso:
_Cluster_Pso.individual_t_swigregister(individual_t)

class float_v(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _Cluster_Pso.float_v_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _Cluster_Pso.float_v___nonzero__(self)

    def __bool__(self):
        return _Cluster_Pso.float_v___bool__(self)

    def __len__(self):
        return _Cluster_Pso.float_v___len__(self)

    def __getslice__(self, i, j):
        return _Cluster_Pso.float_v___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _Cluster_Pso.float_v___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _Cluster_Pso.float_v___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _Cluster_Pso.float_v___delitem__(self, *args)

    def __getitem__(self, *args):
        return _Cluster_Pso.float_v___getitem__(self, *args)

    def __setitem__(self, *args):
        return _Cluster_Pso.float_v___setitem__(self, *args)

    def pop(self):
        return _Cluster_Pso.float_v_pop(self)

    def append(self, x):
        return _Cluster_Pso.float_v_append(self, x)

    def empty(self):
        return _Cluster_Pso.float_v_empty(self)

    def size(self):
        return _Cluster_Pso.float_v_size(self)

    def swap(self, v):
        return _Cluster_Pso.float_v_swap(self, v)

    def begin(self):
        return _Cluster_Pso.float_v_begin(self)

    def end(self):
        return _Cluster_Pso.float_v_end(self)

    def rbegin(self):
        return _Cluster_Pso.float_v_rbegin(self)

    def rend(self):
        return _Cluster_Pso.float_v_rend(self)

    def clear(self):
        return _Cluster_Pso.float_v_clear(self)

    def get_allocator(self):
        return _Cluster_Pso.float_v_get_allocator(self)

    def pop_back(self):
        return _Cluster_Pso.float_v_pop_back(self)

    def erase(self, *args):
        return _Cluster_Pso.float_v_erase(self, *args)

    def __init__(self, *args):
        _Cluster_Pso.float_v_swiginit(self, _Cluster_Pso.new_float_v(*args))

    def push_back(self, x):
        return _Cluster_Pso.float_v_push_back(self, x)

    def front(self):
        return _Cluster_Pso.float_v_front(self)

    def back(self):
        return _Cluster_Pso.float_v_back(self)

    def assign(self, n, x):
        return _Cluster_Pso.float_v_assign(self, n, x)

    def resize(self, *args):
        return _Cluster_Pso.float_v_resize(self, *args)

    def insert(self, *args):
        return _Cluster_Pso.float_v_insert(self, *args)

    def reserve(self, n):
        return _Cluster_Pso.float_v_reserve(self, n)

    def capacity(self):
        return _Cluster_Pso.float_v_capacity(self)
    __swig_destroy__ = _Cluster_Pso.delete_float_v

# Register float_v in _Cluster_Pso:
_Cluster_Pso.float_v_swigregister(float_v)

class vector1(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _Cluster_Pso.vector1_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _Cluster_Pso.vector1___nonzero__(self)

    def __bool__(self):
        return _Cluster_Pso.vector1___bool__(self)

    def __len__(self):
        return _Cluster_Pso.vector1___len__(self)

    def __getslice__(self, i, j):
        return _Cluster_Pso.vector1___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _Cluster_Pso.vector1___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _Cluster_Pso.vector1___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _Cluster_Pso.vector1___delitem__(self, *args)

    def __getitem__(self, *args):
        return _Cluster_Pso.vector1___getitem__(self, *args)

    def __setitem__(self, *args):
        return _Cluster_Pso.vector1___setitem__(self, *args)

    def pop(self):
        return _Cluster_Pso.vector1_pop(self)

    def append(self, x):
        return _Cluster_Pso.vector1_append(self, x)

    def empty(self):
        return _Cluster_Pso.vector1_empty(self)

    def size(self):
        return _Cluster_Pso.vector1_size(self)

    def swap(self, v):
        return _Cluster_Pso.vector1_swap(self, v)

    def begin(self):
        return _Cluster_Pso.vector1_begin(self)

    def end(self):
        return _Cluster_Pso.vector1_end(self)

    def rbegin(self):
        return _Cluster_Pso.vector1_rbegin(self)

    def rend(self):
        return _Cluster_Pso.vector1_rend(self)

    def clear(self):
        return _Cluster_Pso.vector1_clear(self)

    def get_allocator(self):
        return _Cluster_Pso.vector1_get_allocator(self)

    def pop_back(self):
        return _Cluster_Pso.vector1_pop_back(self)

    def erase(self, *args):
        return _Cluster_Pso.vector1_erase(self, *args)

    def __init__(self, *args):
        _Cluster_Pso.vector1_swiginit(self, _Cluster_Pso.new_vector1(*args))

    def push_back(self, x):
        return _Cluster_Pso.vector1_push_back(self, x)

    def front(self):
        return _Cluster_Pso.vector1_front(self)

    def back(self):
        return _Cluster_Pso.vector1_back(self)

    def assign(self, n, x):
        return _Cluster_Pso.vector1_assign(self, n, x)

    def resize(self, *args):
        return _Cluster_Pso.vector1_resize(self, *args)

    def insert(self, *args):
        return _Cluster_Pso.vector1_insert(self, *args)

    def reserve(self, n):
        return _Cluster_Pso.vector1_reserve(self, n)

    def capacity(self):
        return _Cluster_Pso.vector1_capacity(self)
    __swig_destroy__ = _Cluster_Pso.delete_vector1

# Register vector1 in _Cluster_Pso:
_Cluster_Pso.vector1_swigregister(vector1)

class vector2(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _Cluster_Pso.vector2_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _Cluster_Pso.vector2___nonzero__(self)

    def __bool__(self):
        return _Cluster_Pso.vector2___bool__(self)

    def __len__(self):
        return _Cluster_Pso.vector2___len__(self)

    def __getslice__(self, i, j):
        return _Cluster_Pso.vector2___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _Cluster_Pso.vector2___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _Cluster_Pso.vector2___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _Cluster_Pso.vector2___delitem__(self, *args)

    def __getitem__(self, *args):
        return _Cluster_Pso.vector2___getitem__(self, *args)

    def __setitem__(self, *args):
        return _Cluster_Pso.vector2___setitem__(self, *args)

    def pop(self):
        return _Cluster_Pso.vector2_pop(self)

    def append(self, x):
        return _Cluster_Pso.vector2_append(self, x)

    def empty(self):
        return _Cluster_Pso.vector2_empty(self)

    def size(self):
        return _Cluster_Pso.vector2_size(self)

    def swap(self, v):
        return _Cluster_Pso.vector2_swap(self, v)

    def begin(self):
        return _Cluster_Pso.vector2_begin(self)

    def end(self):
        return _Cluster_Pso.vector2_end(self)

    def rbegin(self):
        return _Cluster_Pso.vector2_rbegin(self)

    def rend(self):
        return _Cluster_Pso.vector2_rend(self)

    def clear(self):
        return _Cluster_Pso.vector2_clear(self)

    def get_allocator(self):
        return _Cluster_Pso.vector2_get_allocator(self)

    def pop_back(self):
        return _Cluster_Pso.vector2_pop_back(self)

    def erase(self, *args):
        return _Cluster_Pso.vector2_erase(self, *args)

    def __init__(self, *args):
        _Cluster_Pso.vector2_swiginit(self, _Cluster_Pso.new_vector2(*args))

    def push_back(self, x):
        return _Cluster_Pso.vector2_push_back(self, x)

    def front(self):
        return _Cluster_Pso.vector2_front(self)

    def back(self):
        return _Cluster_Pso.vector2_back(self)

    def assign(self, n, x):
        return _Cluster_Pso.vector2_assign(self, n, x)

    def resize(self, *args):
        return _Cluster_Pso.vector2_resize(self, *args)

    def insert(self, *args):
        return _Cluster_Pso.vector2_insert(self, *args)

    def reserve(self, n):
        return _Cluster_Pso.vector2_reserve(self, n)

    def capacity(self):
        return _Cluster_Pso.vector2_capacity(self)
    __swig_destroy__ = _Cluster_Pso.delete_vector2

# Register vector2 in _Cluster_Pso:
_Cluster_Pso.vector2_swigregister(vector2)

class dict_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _Cluster_Pso.dict_t_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _Cluster_Pso.dict_t___nonzero__(self)

    def __bool__(self):
        return _Cluster_Pso.dict_t___bool__(self)

    def __len__(self):
        return _Cluster_Pso.dict_t___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _Cluster_Pso.dict_t___getitem__(self, key)

    def __delitem__(self, key):
        return _Cluster_Pso.dict_t___delitem__(self, key)

    def has_key(self, key):
        return _Cluster_Pso.dict_t_has_key(self, key)

    def keys(self):
        return _Cluster_Pso.dict_t_keys(self)

    def values(self):
        return _Cluster_Pso.dict_t_values(self)

    def items(self):
        return _Cluster_Pso.dict_t_items(self)

    def __contains__(self, key):
        return _Cluster_Pso.dict_t___contains__(self, key)

    def key_iterator(self):
        return _Cluster_Pso.dict_t_key_iterator(self)

    def value_iterator(self):
        return _Cluster_Pso.dict_t_value_iterator(self)

    def __setitem__(self, *args):
        return _Cluster_Pso.dict_t___setitem__(self, *args)

    def asdict(self):
        return _Cluster_Pso.dict_t_asdict(self)

    def __init__(self, *args):
        _Cluster_Pso.dict_t_swiginit(self, _Cluster_Pso.new_dict_t(*args))

    def empty(self):
        return _Cluster_Pso.dict_t_empty(self)

    def size(self):
        return _Cluster_Pso.dict_t_size(self)

    def swap(self, v):
        return _Cluster_Pso.dict_t_swap(self, v)

    def begin(self):
        return _Cluster_Pso.dict_t_begin(self)

    def end(self):
        return _Cluster_Pso.dict_t_end(self)

    def rbegin(self):
        return _Cluster_Pso.dict_t_rbegin(self)

    def rend(self):
        return _Cluster_Pso.dict_t_rend(self)

    def clear(self):
        return _Cluster_Pso.dict_t_clear(self)

    def get_allocator(self):
        return _Cluster_Pso.dict_t_get_allocator(self)

    def count(self, x):
        return _Cluster_Pso.dict_t_count(self, x)

    def erase(self, *args):
        return _Cluster_Pso.dict_t_erase(self, *args)

    def find(self, x):
        return _Cluster_Pso.dict_t_find(self, x)

    def lower_bound(self, x):
        return _Cluster_Pso.dict_t_lower_bound(self, x)

    def upper_bound(self, x):
        return _Cluster_Pso.dict_t_upper_bound(self, x)
    __swig_destroy__ = _Cluster_Pso.delete_dict_t

# Register dict_t in _Cluster_Pso:
_Cluster_Pso.dict_t_swigregister(dict_t)

class map0(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _Cluster_Pso.map0_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _Cluster_Pso.map0___nonzero__(self)

    def __bool__(self):
        return _Cluster_Pso.map0___bool__(self)

    def __len__(self):
        return _Cluster_Pso.map0___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _Cluster_Pso.map0___getitem__(self, key)

    def __delitem__(self, key):
        return _Cluster_Pso.map0___delitem__(self, key)

    def has_key(self, key):
        return _Cluster_Pso.map0_has_key(self, key)

    def keys(self):
        return _Cluster_Pso.map0_keys(self)

    def values(self):
        return _Cluster_Pso.map0_values(self)

    def items(self):
        return _Cluster_Pso.map0_items(self)

    def __contains__(self, key):
        return _Cluster_Pso.map0___contains__(self, key)

    def key_iterator(self):
        return _Cluster_Pso.map0_key_iterator(self)

    def value_iterator(self):
        return _Cluster_Pso.map0_value_iterator(self)

    def __setitem__(self, *args):
        return _Cluster_Pso.map0___setitem__(self, *args)

    def asdict(self):
        return _Cluster_Pso.map0_asdict(self)

    def __init__(self, *args):
        _Cluster_Pso.map0_swiginit(self, _Cluster_Pso.new_map0(*args))

    def empty(self):
        return _Cluster_Pso.map0_empty(self)

    def size(self):
        return _Cluster_Pso.map0_size(self)

    def swap(self, v):
        return _Cluster_Pso.map0_swap(self, v)

    def begin(self):
        return _Cluster_Pso.map0_begin(self)

    def end(self):
        return _Cluster_Pso.map0_end(self)

    def rbegin(self):
        return _Cluster_Pso.map0_rbegin(self)

    def rend(self):
        return _Cluster_Pso.map0_rend(self)

    def clear(self):
        return _Cluster_Pso.map0_clear(self)

    def get_allocator(self):
        return _Cluster_Pso.map0_get_allocator(self)

    def count(self, x):
        return _Cluster_Pso.map0_count(self, x)

    def erase(self, *args):
        return _Cluster_Pso.map0_erase(self, *args)

    def find(self, x):
        return _Cluster_Pso.map0_find(self, x)

    def lower_bound(self, x):
        return _Cluster_Pso.map0_lower_bound(self, x)

    def upper_bound(self, x):
        return _Cluster_Pso.map0_upper_bound(self, x)
    __swig_destroy__ = _Cluster_Pso.delete_map0

# Register map0 in _Cluster_Pso:
_Cluster_Pso.map0_swigregister(map0)

class map1(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _Cluster_Pso.map1_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _Cluster_Pso.map1___nonzero__(self)

    def __bool__(self):
        return _Cluster_Pso.map1___bool__(self)

    def __len__(self):
        return _Cluster_Pso.map1___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _Cluster_Pso.map1___getitem__(self, key)

    def __delitem__(self, key):
        return _Cluster_Pso.map1___delitem__(self, key)

    def has_key(self, key):
        return _Cluster_Pso.map1_has_key(self, key)

    def keys(self):
        return _Cluster_Pso.map1_keys(self)

    def values(self):
        return _Cluster_Pso.map1_values(self)

    def items(self):
        return _Cluster_Pso.map1_items(self)

    def __contains__(self, key):
        return _Cluster_Pso.map1___contains__(self, key)

    def key_iterator(self):
        return _Cluster_Pso.map1_key_iterator(self)

    def value_iterator(self):
        return _Cluster_Pso.map1_value_iterator(self)

    def __setitem__(self, *args):
        return _Cluster_Pso.map1___setitem__(self, *args)

    def asdict(self):
        return _Cluster_Pso.map1_asdict(self)

    def __init__(self, *args):
        _Cluster_Pso.map1_swiginit(self, _Cluster_Pso.new_map1(*args))

    def empty(self):
        return _Cluster_Pso.map1_empty(self)

    def size(self):
        return _Cluster_Pso.map1_size(self)

    def swap(self, v):
        return _Cluster_Pso.map1_swap(self, v)

    def begin(self):
        return _Cluster_Pso.map1_begin(self)

    def end(self):
        return _Cluster_Pso.map1_end(self)

    def rbegin(self):
        return _Cluster_Pso.map1_rbegin(self)

    def rend(self):
        return _Cluster_Pso.map1_rend(self)

    def clear(self):
        return _Cluster_Pso.map1_clear(self)

    def get_allocator(self):
        return _Cluster_Pso.map1_get_allocator(self)

    def count(self, x):
        return _Cluster_Pso.map1_count(self, x)

    def erase(self, *args):
        return _Cluster_Pso.map1_erase(self, *args)

    def find(self, x):
        return _Cluster_Pso.map1_find(self, x)

    def lower_bound(self, x):
        return _Cluster_Pso.map1_lower_bound(self, x)

    def upper_bound(self, x):
        return _Cluster_Pso.map1_upper_bound(self, x)
    __swig_destroy__ = _Cluster_Pso.delete_map1

# Register map1 in _Cluster_Pso:
_Cluster_Pso.map1_swigregister(map1)

class config_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Cluster_Pso.config_t_swiginit(self, _Cluster_Pso.new_config_t(*args))
    first = property(_Cluster_Pso.config_t_first_get, _Cluster_Pso.config_t_first_set)
    second = property(_Cluster_Pso.config_t_second_get, _Cluster_Pso.config_t_second_set)
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _Cluster_Pso.delete_config_t

# Register config_t in _Cluster_Pso:
_Cluster_Pso.config_t_swigregister(config_t)

class region_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Cluster_Pso.region_t_swiginit(self, _Cluster_Pso.new_region_t(*args))
    first = property(_Cluster_Pso.region_t_first_get, _Cluster_Pso.region_t_first_set)
    second = property(_Cluster_Pso.region_t_second_get, _Cluster_Pso.region_t_second_set)
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _Cluster_Pso.delete_region_t

# Register region_t in _Cluster_Pso:
_Cluster_Pso.region_t_swigregister(region_t)

class possible(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _Cluster_Pso.possible_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _Cluster_Pso.possible___nonzero__(self)

    def __bool__(self):
        return _Cluster_Pso.possible___bool__(self)

    def __len__(self):
        return _Cluster_Pso.possible___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _Cluster_Pso.possible___getitem__(self, key)

    def __delitem__(self, key):
        return _Cluster_Pso.possible___delitem__(self, key)

    def has_key(self, key):
        return _Cluster_Pso.possible_has_key(self, key)

    def keys(self):
        return _Cluster_Pso.possible_keys(self)

    def values(self):
        return _Cluster_Pso.possible_values(self)

    def items(self):
        return _Cluster_Pso.possible_items(self)

    def __contains__(self, key):
        return _Cluster_Pso.possible___contains__(self, key)

    def key_iterator(self):
        return _Cluster_Pso.possible_key_iterator(self)

    def value_iterator(self):
        return _Cluster_Pso.possible_value_iterator(self)

    def __setitem__(self, *args):
        return _Cluster_Pso.possible___setitem__(self, *args)

    def asdict(self):
        return _Cluster_Pso.possible_asdict(self)

    def __init__(self, *args):
        _Cluster_Pso.possible_swiginit(self, _Cluster_Pso.new_possible(*args))

    def empty(self):
        return _Cluster_Pso.possible_empty(self)

    def size(self):
        return _Cluster_Pso.possible_size(self)

    def swap(self, v):
        return _Cluster_Pso.possible_swap(self, v)

    def begin(self):
        return _Cluster_Pso.possible_begin(self)

    def end(self):
        return _Cluster_Pso.possible_end(self)

    def rbegin(self):
        return _Cluster_Pso.possible_rbegin(self)

    def rend(self):
        return _Cluster_Pso.possible_rend(self)

    def clear(self):
        return _Cluster_Pso.possible_clear(self)

    def get_allocator(self):
        return _Cluster_Pso.possible_get_allocator(self)

    def count(self, x):
        return _Cluster_Pso.possible_count(self, x)

    def erase(self, *args):
        return _Cluster_Pso.possible_erase(self, *args)

    def find(self, x):
        return _Cluster_Pso.possible_find(self, x)

    def lower_bound(self, x):
        return _Cluster_Pso.possible_lower_bound(self, x)

    def upper_bound(self, x):
        return _Cluster_Pso.possible_upper_bound(self, x)
    __swig_destroy__ = _Cluster_Pso.delete_possible

# Register possible in _Cluster_Pso:
_Cluster_Pso.possible_swigregister(possible)

class pos(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _Cluster_Pso.pos_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _Cluster_Pso.pos___nonzero__(self)

    def __bool__(self):
        return _Cluster_Pso.pos___bool__(self)

    def __len__(self):
        return _Cluster_Pso.pos___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _Cluster_Pso.pos___getitem__(self, key)

    def __delitem__(self, key):
        return _Cluster_Pso.pos___delitem__(self, key)

    def has_key(self, key):
        return _Cluster_Pso.pos_has_key(self, key)

    def keys(self):
        return _Cluster_Pso.pos_keys(self)

    def values(self):
        return _Cluster_Pso.pos_values(self)

    def items(self):
        return _Cluster_Pso.pos_items(self)

    def __contains__(self, key):
        return _Cluster_Pso.pos___contains__(self, key)

    def key_iterator(self):
        return _Cluster_Pso.pos_key_iterator(self)

    def value_iterator(self):
        return _Cluster_Pso.pos_value_iterator(self)

    def __setitem__(self, *args):
        return _Cluster_Pso.pos___setitem__(self, *args)

    def asdict(self):
        return _Cluster_Pso.pos_asdict(self)

    def __init__(self, *args):
        _Cluster_Pso.pos_swiginit(self, _Cluster_Pso.new_pos(*args))

    def empty(self):
        return _Cluster_Pso.pos_empty(self)

    def size(self):
        return _Cluster_Pso.pos_size(self)

    def swap(self, v):
        return _Cluster_Pso.pos_swap(self, v)

    def begin(self):
        return _Cluster_Pso.pos_begin(self)

    def end(self):
        return _Cluster_Pso.pos_end(self)

    def rbegin(self):
        return _Cluster_Pso.pos_rbegin(self)

    def rend(self):
        return _Cluster_Pso.pos_rend(self)

    def clear(self):
        return _Cluster_Pso.pos_clear(self)

    def get_allocator(self):
        return _Cluster_Pso.pos_get_allocator(self)

    def count(self, x):
        return _Cluster_Pso.pos_count(self, x)

    def erase(self, *args):
        return _Cluster_Pso.pos_erase(self, *args)

    def find(self, x):
        return _Cluster_Pso.pos_find(self, x)

    def lower_bound(self, x):
        return _Cluster_Pso.pos_lower_bound(self, x)

    def upper_bound(self, x):
        return _Cluster_Pso.pos_upper_bound(self, x)
    __swig_destroy__ = _Cluster_Pso.delete_pos

# Register pos in _Cluster_Pso:
_Cluster_Pso.pos_swigregister(pos)

class position(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Cluster_Pso.position_swiginit(self, _Cluster_Pso.new_position(*args))
    first = property(_Cluster_Pso.position_first_get, _Cluster_Pso.position_first_set)
    second = property(_Cluster_Pso.position_second_get, _Cluster_Pso.position_second_set)
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _Cluster_Pso.delete_position

# Register position in _Cluster_Pso:
_Cluster_Pso.position_swigregister(position)

class Optimizer(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _Cluster_Pso.delete_Optimizer

    def Run(self, *args):
        return _Cluster_Pso.Optimizer_Run(self, *args)

    def SetAlpha(self, value):
        return _Cluster_Pso.Optimizer_SetAlpha(self, value)

    def SetBeta(self, value):
        return _Cluster_Pso.Optimizer_SetBeta(self, value)

    def SetGamma(self, value):
        return _Cluster_Pso.Optimizer_SetGamma(self, value)

    def GetLearningTrace(self):
        return _Cluster_Pso.Optimizer_GetLearningTrace(self)

    def GetTerm1Trace(self):
        return _Cluster_Pso.Optimizer_GetTerm1Trace(self)

    def GetTerm2Trace(self):
        return _Cluster_Pso.Optimizer_GetTerm2Trace(self)

# Register Optimizer in _Cluster_Pso:
_Cluster_Pso.Optimizer_swigregister(Optimizer)

class Cluster_Pso(Optimizer):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, size, gateway, sensor, ids, config, base):
        _Cluster_Pso.Cluster_Pso_swiginit(self, _Cluster_Pso.new_Cluster_Pso(size, gateway, sensor, ids, config, base))
    __swig_destroy__ = _Cluster_Pso.delete_Cluster_Pso

    def Calculate_distance(self, a, b):
        return _Cluster_Pso.Cluster_Pso_Calculate_distance(self, a, b)

# Register Cluster_Pso in _Cluster_Pso:
_Cluster_Pso.Cluster_Pso_swigregister(Cluster_Pso)



